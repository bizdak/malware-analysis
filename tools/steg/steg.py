from PIL import Image
import getopt
import sys
import os


class Encoder:
    def __init__(self, image):
        self.image = image
        self.idx = 0
        self.width, self.height = image.size
        self.max_bytes = self.width * self.height
        self.pixel = image.load()

    def encode_byte(self, byte):
        if self.idx >= self.max_bytes:
            raise EOFError()
        # split across r, g, b (3, 3, 2 bits)
        r = (byte >> 5) & 0x7
        g = (byte >> 2) & 0x7
        b = byte & 0x3
        x, y = (self.idx % self.width, int(self.idx / self.height))
        r_, g_, b_ = self.pixel[x, y]
        r_ = (r_ & ~0x7) | r
        g_ = (g_ & ~0x7) | g
        b_ = (b_ & ~0x3) | b
        self.pixel[x, y] = r_, g_, b_
        self.idx += 1


class Decoder:
    def __init__(self, image):
        self.image = image
        self.idx = 0
        self.width, self.height = image.size
        self.max_bytes = self.width * self.height
        self.pixel = image.load()

    def decode_byte(self):
        if self.idx >= self.max_bytes:
            raise EOFError()
        x, y = (self.idx % self.width, int(self.idx / self.height))
        r, g, b = self.pixel[x, y]
        self.idx += 1
        return (((r & 0x7) << 5) | ((g & 0x7) << 2) | (b & 0x3)) & 0xff


def hide_data(image, data):
    """ Hide data in image, passed image is updated """
    width, height = image.size
    n = len(data)
    print("Image size: %d" % (width * height))
    print("Data size: %d" % n)
    if n + 4 > (width * height):
        # We can split across multiple image files, or just make the length 4 bytes
        raise Exception("Image file is not big enough to contain data")

    if n > 0xffffffff:
        raise Exception("Data file too big")

    encoder = Encoder(image)
    encoder.encode_byte(n & 0xff)
    encoder.encode_byte((n >> 8) & 0xff)
    encoder.encode_byte((n >> 16) & 0xff)
    encoder.encode_byte((n >> 24) & 0xff)
    for b in data:
        encoder.encode_byte(b)


def unhide_data(image):
    """ Unhide data from image, returns decoded data """
    decoder = Decoder(image)
    n = (decoder.decode_byte() | (decoder.decode_byte() << 8) |
         (decoder.decode_byte() << 16) | (decoder.decode_byte() << 24))
    width, height = image.size
    if n > (width * height):
        print("Image does not contain data, length is invalid - length: %d" % n)
        return None
    print("Expected data length: %d" % n)
    data = bytearray()
    for n in range(n):
        data.append(decoder.decode_byte())
    return data


def hide_file(datafile, imagefile, outfile):
    print("Opening image file: %s" % imagefile)
    image = Image.open(imagefile)
    print("Reading input data file: %s" % datafile)
    with open(datafile, 'rb') as df:
        hide_data(image, df.read())
    image.save(outfile)


def unhide_file(imagefile, outfile):
    print("Opening image file: %s" % imagefile)
    image = Image.open(imagefile)
    print("Decoding data from image file")
    data = unhide_data(image)
    with open(outfile, 'wb') as f:
        f.write(data)


def usage():
    print("Usage: python steg.py <opts>\n\n"
          "Options:\n"
          "   -e [<datafile>]     : file to encode if encoding\n"
          "   -i <imagefile>      : image file to decode or use to hide the data\n"
          "   -o <outputfile>     : output file\n"
          "\n\n"
          "Examples:\n"
          "  Hide test.txt in image.png and save to hidden.png\n\n"
          "  > python steg.py -e test.txt -i image.png -o hidden.png\n"
          "\n\n"
          "  Decode data hidden in image.png to decoded.txt\n\n"
          "  > python steg.py -i image.png -o decoded.txt\n"
          )
    sys.exit(1)


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'e:i:o:h')
    except getopt.GetoptError as err:
        print(err)
        sys.exit(1)

    datafile, imagefile, outfile = None, None, None
    for o, a in opts:
        if o == '-e':
            datafile = a
        elif o == '-i':
            imagefile = a
        elif o == '-o':
            outfile = a
        elif o == '-h':
            usage()

    if not imagefile and not outfile:
        print("Error: Please specify an imagefile and an outputfile\n")
        usage()

    try:
        if datafile is not None:
            # always save as 'png'
            filename, ext = os.path.splitext(outfile)
            if ext.lower() != '.png':
                print('WARNING: output is not .png, renaming to .png')
            outfile = filename + '.png'
            hide_file(datafile, imagefile, outfile)
            print("%s is hidden in %s" % (datafile, outfile))
        else:
            unhide_file(imagefile, outfile)
            print("%s is decoded to %s" % (imagefile, outfile))
    except BaseException as err:
        print("Error: %s" % err)
        sys.exit(2)


if __name__ == '__main__':
    main()
